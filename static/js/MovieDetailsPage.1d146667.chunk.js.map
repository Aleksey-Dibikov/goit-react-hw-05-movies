{"version":3,"sources":["service/api.js","views/MovieDetailsPage/MovieDetailsPage.module.css","components/Cast/Cast.js","components/Reviews/Reviews.js","views/MovieDetailsPage/MovieDetailsPage.js"],"names":["BASE_URL","API_KEY","module","exports","Cast","movieId","useState","cast","setCast","useEffect","axios","get","then","resp","data","catch","error","console","log","map","actor","src","profile_path","alt","width","name","character","id","Reviews","reviews","setReviews","results","length","review","author","content","MovieDetailsPage","url","useRouteMatch","useParams","movie","setMovie","type","className","s","btn","to","exact","card","poster_path","title","discription","release_date","vote_average","overview","genres","genre","path"],"mappings":"yIAAA,oEAAO,IAAMA,EAAW,gCACXC,EAAU,6C,mBCAvBC,EAAOC,QAAU,CAAC,IAAM,8BAA8B,KAAO,+BAA+B,YAAc,wC,iKCK3F,SAASC,EAAT,GAA4B,IAAZC,EAAW,EAAXA,QAC7B,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAQA,OANAC,qBAAU,WACRC,IACGC,IADH,UACUX,IADV,iBAC2BK,EAD3B,mBAC6CJ,IAD7C,oBAEGW,MAAK,SAAAC,GAAI,OAAIL,EAAQK,EAAKC,KAAKP,SAC/BQ,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,CAACX,IAEF,6BACGE,EAAKY,KAAI,SAAAC,GACR,OACE,+BACE,qBACEC,IAAG,yCAAoCD,EAAME,cAC7CC,IAAI,GACJC,MAAM,QAER,4BAAIJ,EAAMK,OACV,4CAAeL,EAAMM,eAPdN,EAAMO,SCdV,SAASC,EAAT,GAA+B,IAAZvB,EAAW,EAAXA,QAChC,EAA8BC,mBAAS,IAAvC,mBAAOuB,EAAP,KAAgBC,EAAhB,KAUA,OARArB,qBAAU,WACRC,IACGC,IADH,UAEOX,IAFP,iBAEwBK,EAFxB,mBAE0CJ,IAF1C,2BAIGW,MAAK,SAAAC,GAAI,OAAIiB,EAAWjB,EAAKC,KAAKiB,YAClChB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,CAACX,IAEF,6BACGwB,EAAQG,OACLH,EAAQV,KAAI,SAAAc,GACV,OACE,+BACE,0CAAaA,EAAOC,UACpB,4BAAID,EAAOE,YAFJF,EAAON,OAMpB,6CClBK,SAASS,IACtB,IAAQC,EAAQC,cAARD,IACAhC,EAAYkC,cAAZlC,QACR,EAA0BC,mBAAS,MAAnC,mBAAOkC,EAAP,KAAcC,EAAd,KAQA,OANAhC,qBAAU,WACRC,IACGC,IADH,UACUX,IADV,iBAC2BK,GAD3B,OACqCJ,IADrC,oBAEGW,MAAK,SAAAC,GAAI,OAAI4B,EAAS5B,EAAKC,SAC3BC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,CAACX,IAEF,qCACE,wBAAQqC,KAAK,SAASC,UAAWC,IAAEC,IAAnC,SACE,cAAC,IAAD,CAASC,GAAG,IAAIC,OAAK,EAArB,uBAIDP,GACC,qCACE,sBAAKG,UAAWC,IAAEI,KAAlB,UACE,qBAAKL,UAAU,GAAf,SACE,qBACEtB,IAAG,yCAAoCmB,EAAMS,aAC7C1B,IAAKiB,EAAMU,MACX1B,MAAM,UAGV,sBAAKmB,UAAWC,IAAEO,YAAlB,UACE,+BACGX,EAAMU,MADT,KACkBV,EAAMY,aADxB,OAGA,6CAAgBZ,EAAMa,gBACtB,0CACA,4BAAIb,EAAMc,WACV,wCACA,oBAAIX,UAAU,GAAd,SACGH,EAAMe,OAAOpC,KAAI,SAAAqC,GAChB,OACE,oBAAIb,UAAU,GAAd,SACGa,EAAM/B,MADa+B,EAAM7B,eAQtC,gCACE,wDACA,+BACE,6BACE,cAAC,IAAD,CAASmB,GAAE,UAAKT,EAAL,SAAX,oBAEF,6BACE,cAAC,IAAD,CAASS,GAAE,UAAKT,EAAL,YAAX,6BAKN,cAAC,IAAD,CAAOoB,KAAK,wBAAZ,SACE,cAACrD,EAAD,CAAMC,QAASA,MAEjB,cAAC,IAAD,CAAOoD,KAAK,2BAAZ,SACE,cAAC7B,EAAD,CAASvB,QAASA","file":"static/js/MovieDetailsPage.1d146667.chunk.js","sourcesContent":["export const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = '?api_key=5ac7dab86f0784856afa396a121529bf';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"MovieDetailsPage_btn__3pccn\",\"card\":\"MovieDetailsPage_card__1A42-\",\"discription\":\"MovieDetailsPage_discription__2EcZV\"};","import PropTypes from 'prop-types';\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { API_KEY, BASE_URL } from '../../service/api';\n\nexport default function Cast({ movieId }) {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(`${BASE_URL}movie/${movieId}/credits${API_KEY}&language=en-US`)\n      .then(resp => setCast(resp.data.cast))\n      .catch(error => console.log(error));\n  }, [movieId]);\n  return (\n    <ul>\n      {cast.map(actor => {\n        return (\n          <li key={actor.id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`}\n              alt=\"\"\n              width=\"250\"\n            />\n            <p>{actor.name}</p>\n            <p>Character: {actor.character}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nCast.propTypes = {\n  movieId: PropTypes.object.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { API_KEY, BASE_URL } from '../../service/api';\n\nexport default function Reviews({ movieId }) {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(\n        `${BASE_URL}movie/${movieId}/reviews${API_KEY}&language=en-US&page=1`,\n      )\n      .then(resp => setReviews(resp.data.results))\n      .catch(error => console.log(error));\n  }, [movieId]);\n  return (\n    <ul>\n      {reviews.length\n        ? reviews.map(review => {\n            return (\n              <li key={review.id}>\n                <h3>Author: {review.author}</h3>\n                <p>{review.content}</p>\n              </li>\n            );\n          })\n        : 'We don`t have any reviews for this movie'}\n    </ul>\n  );\n}\n\nReviews.propTypes = {\n  movieId: PropTypes.array.isRequired,\n};\n","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { Route, useParams } from 'react-router';\nimport { NavLink, useRouteMatch } from 'react-router-dom';\nimport { BASE_URL, API_KEY } from '../../service/api';\nimport s from './MovieDetailsPage.module.css';\nimport Cast from '../../components/Cast/Cast';\nimport Reviews from '../../components/Reviews/Reviews';\n\nexport default function MovieDetailsPage() {\n  const { url } = useRouteMatch();\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    axios\n      .get(`${BASE_URL}movie/${movieId}${API_KEY}&language=en-US`)\n      .then(resp => setMovie(resp.data))\n      .catch(error => console.log(error));\n  }, [movieId]);\n  return (\n    <>\n      <button type=\"button\" className={s.btn}>\n        <NavLink to=\"/\" exact>\n          Go back\n        </NavLink>\n      </button>\n      {movie && (\n        <>\n          <div className={s.card}>\n            <div className=\"\">\n              <img\n                src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n                alt={movie.title}\n                width=\"300\"\n              />\n            </div>\n            <div className={s.discription}>\n              <h2>\n                {movie.title} ({movie.release_date})\n              </h2>\n              <p>User score: {movie.vote_average}</p>\n              <h3>Overview</h3>\n              <p>{movie.overview}</p>\n              <h3>Genres</h3>\n              <ul className=\"\">\n                {movie.genres.map(genre => {\n                  return (\n                    <li className=\"\" key={genre.id}>\n                      {genre.name}\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </div>\n          <div>\n            <h2>Additional information</h2>\n            <ul>\n              <li>\n                <NavLink to={`${url}/cast`}>Cast</NavLink>\n              </li>\n              <li>\n                <NavLink to={`${url}/reviews`}>Reviews</NavLink>\n              </li>\n            </ul>\n          </div>\n\n          <Route path=\"/movies/:movieId/cast\">\n            <Cast movieId={movieId} />\n          </Route>\n          <Route path=\"/movies/:movieId/reviews\">\n            <Reviews movieId={movieId} />\n          </Route>\n        </>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}